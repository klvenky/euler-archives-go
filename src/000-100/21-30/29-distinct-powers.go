/*
Distinct powers
Problem 29

Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

    2^2=4, 23=8, 24=16, 25=32
    32=9, 33=27, 34=81, 35=243
    42=16, 43=64, 44=256, 45=1024
    52=25, 53=125, 54=625, 55=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
*/
package main

import (
	"fmt"

	"github.com/klvenky/euler-archives-go/src/common"
)

func main() {
	const max uint64 = 100
	const min uint64 = 2
	count := 0
	const arrayLen = max * max
	var results [arrayLen]string

	index := 0
	for i := min; i <= max; i++ {
		for j := min; j <= max; j++ {
			// power := int(math.Pow(float64(i), float64(j)))
			power := common.CalculatePower(i, j)
			textPower := power.Text(10)
			for ai := 0; uint64(ai) < arrayLen; ai++ {
				if results[ai] == textPower {
					break
				}
				if uint64(ai) == arrayLen-1 {
					results[index] = textPower
					index++
					count++
					break
				}
			}
		}
	}
	distinct := make([]string, 0, len(results))
	for _, item := range results {
		if item != "" {
			distinct = append(distinct, item)
		}
	}
	fmt.Printf("The no. of distinct terms in sequence generated by a^b for %d<=a,b<=%d is %d\n", min, max, len(distinct))
}
